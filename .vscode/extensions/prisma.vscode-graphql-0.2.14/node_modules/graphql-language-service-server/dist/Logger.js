"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = require("path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const SEVERITY = {
  ERROR: 'ERROR',
  WARNING: 'WARNING',
  INFO: 'INFO',
  DEBUG: 'DEBUG'
};

class Logger {
  constructor() {
    _defineProperty(this, "_logFilePath", void 0);

    _defineProperty(this, "_stream", void 0);

    const dir = (0, _path.join)(_os.default.tmpdir(), 'graphql-language-service-logs');

    try {
      if (!_fs.default.existsSync(dir)) {
        _fs.default.mkdirSync(dir);
      }
    } catch (_) {// intentionally no-op. Don't block the language server even if
      // the necessary setup cannot be completed for logger.
    }

    this._logFilePath = (0, _path.join)(dir, `graphql-language-service-log-${_os.default.userInfo().username}-${getDateString()}.log`);
    this._stream = null;
  }

  error(message) {
    this._log(message, 'ERROR');
  }

  warn(message) {
    this._log(message, 'WARNING');
  }

  info(message) {
    this._log(message, 'INFO');
  }

  log(message) {
    this._log(message, 'DEBUG');
  }

  _log(message, severityKey = 'DEBUG') {
    const timestamp = new Date().toLocaleString(undefined);
    const severity = SEVERITY[severityKey];
    const pid = process.pid;
    const logMessage = `${timestamp} [${severity}] (pid: ${pid}) graphql-language-service-usage-logs: ${message}\n\n`; // write to the file in tmpdir

    _fs.default.appendFile(this._logFilePath, logMessage, error => {});
  }

} // function getUnixTime() {
//   return new Date().getTime() / 1000;
// }


exports.Logger = Logger;

function getDateString() {
  const date = new Date();
  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
}