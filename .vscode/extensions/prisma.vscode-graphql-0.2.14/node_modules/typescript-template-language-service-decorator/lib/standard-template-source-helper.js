"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var nodes_1 = require("./nodes");
var memoize_1 = require("./util/memoize");
var PlaceholderSubstituter = /** @class */ (function () {
    function PlaceholderSubstituter() {
    }
    PlaceholderSubstituter.replacePlaceholders = function (typescript, settings, node) {
        var literalContents = node.getText().slice(1, -1);
        if (node.kind === typescript.SyntaxKind.NoSubstitutionTemplateLiteral) {
            return literalContents;
        }
        return PlaceholderSubstituter.getSubstitutions(settings, literalContents, PlaceholderSubstituter.getPlaceholderSpans(node));
    };
    PlaceholderSubstituter.getPlaceholderSpans = function (node) {
        var spans = [];
        var stringStart = node.getStart() + 1;
        var nodeStart = node.head.end - stringStart - 2;
        for (var _i = 0, _a = node.templateSpans.map(function (x) { return x.literal; }); _i < _a.length; _i++) {
            var child = _a[_i];
            var start = child.getStart() - stringStart + 1;
            spans.push({ start: nodeStart, end: start });
            nodeStart = child.getEnd() - stringStart - 2;
        }
        return spans;
    };
    PlaceholderSubstituter.getSubstitutions = function (settings, contents, locations) {
        if (settings.getSubstitutions) {
            return settings.getSubstitutions(contents, locations);
        }
        var parts = [];
        var lastIndex = 0;
        for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
            var span = locations_1[_i];
            parts.push(contents.slice(lastIndex, span.start));
            parts.push(this.getSubstitution(settings, contents, span.start, span.end));
            lastIndex = span.end;
        }
        parts.push(contents.slice(lastIndex));
        return parts.join('');
    };
    PlaceholderSubstituter.getSubstitution = function (settings, templateString, start, end) {
        return settings.getSubstitution
            ? settings.getSubstitution(templateString, start, end)
            : 'x'.repeat(end - start);
    };
    return PlaceholderSubstituter;
}());
var StandardTemplateContext = /** @class */ (function () {
    function StandardTemplateContext(typescript, fileName, node, helper, templateSettings) {
        this.typescript = typescript;
        this.fileName = fileName;
        this.node = node;
        this.helper = helper;
        this.templateSettings = templateSettings;
    }
    StandardTemplateContext.prototype.toOffset = function (position) {
        var docOffset = this.helper.getOffset(this.fileName, position.line + this.stringBodyPosition.line, position.line === 0 ? this.stringBodyPosition.character + position.character : position.character);
        return docOffset - this.stringBodyOffset;
    };
    StandardTemplateContext.prototype.toPosition = function (offset) {
        var docPosition = this.helper.getLineAndChar(this.fileName, this.stringBodyOffset + offset);
        return nodes_1.relative(this.stringBodyPosition, docPosition);
    };
    Object.defineProperty(StandardTemplateContext.prototype, "stringBodyOffset", {
        get: function () {
            return this.node.getStart() + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StandardTemplateContext.prototype, "stringBodyPosition", {
        get: function () {
            return this.helper.getLineAndChar(this.fileName, this.stringBodyOffset);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StandardTemplateContext.prototype, "text", {
        get: function () {
            return PlaceholderSubstituter.replacePlaceholders(this.typescript, this.templateSettings, this.node);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StandardTemplateContext.prototype, "rawText", {
        get: function () {
            return this.node.getText().slice(1, -1);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        memoize_1.memoize
    ], StandardTemplateContext.prototype, "stringBodyOffset", null);
    __decorate([
        memoize_1.memoize
    ], StandardTemplateContext.prototype, "stringBodyPosition", null);
    __decorate([
        memoize_1.memoize
    ], StandardTemplateContext.prototype, "text", null);
    __decorate([
        memoize_1.memoize
    ], StandardTemplateContext.prototype, "rawText", null);
    return StandardTemplateContext;
}());
var StandardTemplateSourceHelper = /** @class */ (function () {
    function StandardTemplateSourceHelper(typescript, templateStringSettings, helper, logger // tslint:disable-line
    ) {
        this.typescript = typescript;
        this.templateStringSettings = templateStringSettings;
        this.helper = helper;
        this.logger = logger;
    }
    StandardTemplateSourceHelper.prototype.getTemplate = function (fileName, position) {
        var node = this.getValidTemplateNode(this.templateStringSettings, this.helper.getNode(fileName, position));
        if (!node) {
            return undefined;
        }
        // Make sure we are inside the template string
        if (position <= node.pos) {
            return undefined;
        }
        // Make sure we are not inside of a placeholder
        if (node.kind === this.typescript.SyntaxKind.TemplateExpression) {
            var start = node.head.end;
            for (var _i = 0, _a = node.templateSpans.map(function (x) { return x.literal; }); _i < _a.length; _i++) {
                var child = _a[_i];
                var nextStart = child.getStart();
                if (position >= start && position <= nextStart) {
                    return undefined;
                }
                start = child.getEnd();
            }
        }
        return new StandardTemplateContext(this.typescript, fileName, node, this.helper, this.templateStringSettings);
    };
    StandardTemplateSourceHelper.prototype.getAllTemplates = function (fileName) {
        var _this = this;
        var out = [];
        for (var _i = 0, _a = this.helper.getAllNodes(fileName, function (n) { return _this.getValidTemplateNode(_this.templateStringSettings, n) !== undefined; }); _i < _a.length; _i++) {
            var node = _a[_i];
            var validNode = this.getValidTemplateNode(this.templateStringSettings, node);
            if (validNode) {
                out.push(new StandardTemplateContext(this.typescript, fileName, validNode, this.helper, this.templateStringSettings));
            }
        }
        return out;
    };
    StandardTemplateSourceHelper.prototype.getRelativePosition = function (context, offset) {
        var baseLC = this.helper.getLineAndChar(context.fileName, context.node.getStart() + 1);
        var cursorLC = this.helper.getLineAndChar(context.fileName, offset);
        return nodes_1.relative(baseLC, cursorLC);
    };
    StandardTemplateSourceHelper.prototype.getValidTemplateNode = function (templateStringSettings, node) {
        if (!node) {
            return undefined;
        }
        switch (node.kind) {
            case this.typescript.SyntaxKind.TaggedTemplateExpression:
                if (nodes_1.isTagged(node, templateStringSettings.tags)) {
                    return node.template;
                }
                return undefined;
            case this.typescript.SyntaxKind.NoSubstitutionTemplateLiteral:
                if (nodes_1.isTaggedLiteral(this.typescript, node, templateStringSettings.tags)) {
                    return node;
                }
                return undefined;
            case this.typescript.SyntaxKind.TemplateHead:
                if (!templateStringSettings.enableForStringWithSubstitutions || !node.parent || !node.parent.parent) {
                    return undefined;
                }
                return this.getValidTemplateNode(templateStringSettings, node.parent.parent);
            case this.typescript.SyntaxKind.TemplateMiddle:
            case this.typescript.SyntaxKind.TemplateTail:
                if (!templateStringSettings.enableForStringWithSubstitutions || !node.parent || !node.parent.parent) {
                    return undefined;
                }
                return this.getValidTemplateNode(templateStringSettings, node.parent.parent.parent);
            default:
                return undefined;
        }
    };
    return StandardTemplateSourceHelper;
}());
exports.default = StandardTemplateSourceHelper;
